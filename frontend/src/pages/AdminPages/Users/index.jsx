import classNames from 'classnames/bind';
import { useState, useEffect } from 'react';
import { toast } from 'react-toastify';
import { Link } from 'react-router-dom';
import axios from '../../../setup/axios';
import styles from './Users.module.scss';

const cx = classNames.bind(styles);

function Users() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [newUser, setNewUser] = useState({
    fullName: '',
    email: '',
    password: '',
    phone: '',
  });

  // Fetch users from API
  const fetchUsers = async () => {
    try {
      setLoading(true);
      const response = await axios.get('/users');
      setUsers(response.data);
    } catch (error) {
      console.error('Error fetching users:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN');
  };

  const getRoleBadgeClass = (role) => {
    return role === 'admin' ? 'admin-badge' : 'customer-badge';
  };

  const handleCreateUser = async (e) => {
    e.preventDefault();

    if (!newUser.fullName || !newUser.email || !newUser.password) {
      toast.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
      return;
    }

    try {
      const response = await axios.post('/users', newUser);

      if (response.data.user) {
        // Add new user to the list
        setUsers((prevUsers) => [...prevUsers, response.data.user]);
        toast.success('Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng!');

        // Reset form and close modal
        setNewUser({ fullName: '', email: '', password: '', phone: '' });
        setShowCreateModal(false);
      }
    } catch (error) {
      console.error('Error creating user:', error);
      // Error ƒë√£ ƒë∆∞·ª£c handle trong axios interceptor
    }
  };

  const handleEditUser = (user) => {
    setEditingUser({
      ...user,
      name: user.name || '', // Ensure name field exists
      phone: user.phone || '',
      address: user.address || '',
    });
  };

  const handleUpdateUser = async (e) => {
    e.preventDefault();

    if (!editingUser.name) {
      toast.error('T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      return;
    }

    try {
      const updateData = {
        name: editingUser.name,
        phone: editingUser.phone,
        address: editingUser.address,
      };

      const response = await axios.patch(
        `/users/${editingUser.id}`,
        updateData
      );

      if (response.data.user) {
        // Update user in the list
        setUsers((prevUsers) =>
          prevUsers.map((user) =>
            user.id === editingUser.id ? response.data.user : user
          )
        );

        toast.success('C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng!');
        setEditingUser(null);
      }
    } catch (error) {
      console.error('Error updating user:', error);
      // Error ƒë√£ ƒë∆∞·ª£c handle trong axios interceptor
    }
  };

  const handleDeleteUser = async (userId) => {
    if (
      window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y v√†o th√πng r√°c?')
    ) {
      try {
        await axios.delete(`/users/${userId}`);

        // Remove user from the list
        setUsers((prevUsers) => prevUsers.filter((user) => user.id !== userId));
        toast.success('ƒê√£ chuy·ªÉn ng∆∞·ªùi d√πng v√†o th√πng r√°c!');
      } catch (error) {
        console.error('Error deleting user:', error);
        // Error ƒë√£ ƒë∆∞·ª£c handle trong axios interceptor
      }
    }
  };

  if (loading) {
    return (
      <div className={cx('users')}>
        <div className={cx('loading')}>ƒêang t·∫£i...</div>
      </div>
    );
  }

  return (
    <div className={cx('users')}>
      {/* Users Management */}
      <div className={cx('content-grid')}>
        <div className={cx('content-card', 'users-card')}>
          <div className={cx('card-header')}>
            <div className={cx('header-left')}>
              <h2 className={cx('card-title')}>Danh s√°ch ng∆∞·ªùi d√πng</h2>
              <p className={cx('subtitle')}>
                Qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng trong h·ªá th·ªëng
              </p>
            </div>

            <div className={cx('header-actions')}>
              <Link
                to="/admin/users/trash"
                className={cx('trash-link')}
                title="Xem th√πng r√°c"
              >
                üóëÔ∏è Th√πng r√°c
              </Link>
              <button
                className={cx('create-btn')}
                onClick={() => setShowCreateModal(true)}
              >
                + Th√™m ng∆∞·ªùi d√πng
              </button>
            </div>
          </div>

          <div className={cx('users-table')}>
            <div className={cx('table-header')}>
              <span>ID</span>
              <span>T√™n</span>
              <span>Email</span>
              <span>ƒêi·ªán tho·∫°i</span>
              <span>Vai tr√≤</span>
              <span>Ng√†y t·∫°o</span>
              <span>Thao t√°c</span>
            </div>

            {users.length === 0 ? (
              <div className={cx('no-data')}>
                <p>Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o</p>
              </div>
            ) : (
              users.map((user) => (
                <div key={user.id} className={cx('table-row')}>
                  <span className={cx('user-id')}>#{user.id}</span>
                  <span className={cx('user-name')}>{user.name}</span>
                  <span className={cx('user-email')}>{user.email}</span>
                  <span className={cx('user-phone')}>
                    {user.phone || 'Ch∆∞a c√≥'}
                  </span>
                  <span className={cx('user-role')}>
                    <span
                      className={cx('role-badge', getRoleBadgeClass(user.role))}
                    >
                      {user.role}
                    </span>
                  </span>
                  <span className={cx('user-created')}>
                    {formatDate(user.created_at)}
                  </span>
                  <div className={cx('user-actions')}>
                    <button
                      className={cx('action-btn', 'edit-btn')}
                      onClick={() => handleEditUser(user)}
                      title="Ch·ªânh s·ª≠a"
                    >
                      ‚úèÔ∏è
                    </button>
                    <button
                      className={cx('action-btn', 'delete-btn')}
                      onClick={() => handleDeleteUser(user.id)}
                      title="Chuy·ªÉn v√†o th√πng r√°c"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>

      {/* Create User Modal */}
      {showCreateModal && (
        <div className={cx('modal-overlay')}>
          <div className={cx('modal')}>
            <div className={cx('modal-header')}>
              <h3>Th√™m ng∆∞·ªùi d√πng m·ªõi</h3>
              <button
                className={cx('close-btn')}
                onClick={() => setShowCreateModal(false)}
              >
                √ó
              </button>
            </div>
            <form onSubmit={handleCreateUser} className={cx('modal-form')}>
              <div className={cx('form-group')}>
                <label>
                  H·ªç v√† t√™n <span style={{ color: 'red' }}>*</span>
                </label>
                <input
                  type="text"
                  value={newUser.fullName}
                  onChange={(e) =>
                    setNewUser({ ...newUser, fullName: e.target.value })
                  }
                  required
                />
              </div>
              <div className={cx('form-group')}>
                <label>
                  Email <span style={{ color: 'red' }}>*</span>
                </label>
                <input
                  type="email"
                  value={newUser.email}
                  onChange={(e) =>
                    setNewUser({ ...newUser, email: e.target.value })
                  }
                  required
                />
              </div>
              <div className={cx('form-group')}>
                <label>
                  M·∫≠t kh·∫©u <span style={{ color: 'red' }}>*</span>
                </label>
                <input
                  type="password"
                  value={newUser.password}
                  onChange={(e) =>
                    setNewUser({ ...newUser, password: e.target.value })
                  }
                  required
                  minLength="6"
                />
              </div>
              <div className={cx('form-group')}>
                <label>S·ªë ƒëi·ªán tho·∫°i</label>
                <input
                  type="tel"
                  value={newUser.phone}
                  onChange={(e) =>
                    setNewUser({ ...newUser, phone: e.target.value })
                  }
                />
              </div>
              <div className={cx('modal-actions')}>
                <button
                  type="button"
                  className={cx('cancel-btn')}
                  onClick={() => setShowCreateModal(false)}
                >
                  H·ªßy
                </button>
                <button type="submit" className={cx('submit-btn')}>
                  Th√™m ng∆∞·ªùi d√πng
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Edit User Modal */}
      {editingUser && (
        <div className={cx('modal-overlay')}>
          <div className={cx('modal')}>
            <div className={cx('modal-header')}>
              <h3>Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng</h3>
              <button
                className={cx('close-btn')}
                onClick={() => setEditingUser(null)}
              >
                √ó
              </button>
            </div>
            <form onSubmit={handleUpdateUser} className={cx('modal-form')}>
              <div className={cx('form-group')}>
                <label>
                  H·ªç v√† t√™n <span style={{ color: 'red' }}>*</span>
                </label>
                <input
                  type="text"
                  value={editingUser.name}
                  onChange={(e) =>
                    setEditingUser({ ...editingUser, name: e.target.value })
                  }
                  required
                />
              </div>
              <div className={cx('form-group')}>
                <label>Email (kh√¥ng th·ªÉ thay ƒë·ªïi)</label>
                <input
                  type="email"
                  value={editingUser.email}
                  disabled
                  className={cx('disabled-input')}
                />
              </div>
              <div className={cx('form-group')}>
                <label>S·ªë ƒëi·ªán tho·∫°i</label>
                <input
                  type="tel"
                  value={editingUser.phone}
                  onChange={(e) =>
                    setEditingUser({ ...editingUser, phone: e.target.value })
                  }
                />
              </div>
              <div className={cx('form-group')}>
                <label>ƒê·ªãa ch·ªâ</label>
                <textarea
                  value={editingUser.address}
                  onChange={(e) =>
                    setEditingUser({ ...editingUser, address: e.target.value })
                  }
                  rows="3"
                />
              </div>
              <div className={cx('modal-actions')}>
                <button
                  type="button"
                  className={cx('cancel-btn')}
                  onClick={() => setEditingUser(null)}
                >
                  H·ªßy
                </button>
                <button type="submit" className={cx('submit-btn')}>
                  C·∫≠p nh·∫≠t
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default Users;
